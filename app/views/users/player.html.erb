<script>
    var map, infoWindow, pos;
    
    function initMap() {
        var directionsService = new google.maps.DirectionsService();
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                
                console.log('lat: ', position.coords.latitude);
                console.log('lng: ', position.coords.longitude);

                calculateAndDisplayRoute(directionsService, pos);

            }, function () {
                handleLocationError(true);
            });
        } else {
            handleLocationError(false);
        }
    }

    function calculateAndDisplayRoute(directionsService, address) {        
        console.log('address: ', address)
        console.log('end:', '<%= current_user.end %>');

        directionsService.route({
            origin: pos,
            destination: '<%= current_user.end %>',
            travelMode: 'WALKING'
        }, function (response, status) {
            if (status === 'OK') {
                var distance = 0
                var route = response.routes[0]; 
                distance = route.legs[0].distance.value;
                
                console.log('destination', '<%= current_user.end %>')
                console.log('Distance: ', String(distance))

                console.log("Start:" + route.legs[0].start_address)
                console.log("End:" + route.legs[route.legs.length - 1].end_address)
                console.log("distance set:" + parseFloat(distance, 2))
        }
        });
    }

    function handleLocationError(browserHasGeolocation) {
        console.log("Error")
    }
</script>

<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDGCQhxjnRfnXNtqTYOkhebzXSPtc5KQnY&libraries=places&callback=initMap"></script>
<script type="app/assets/javascripts" src=“timedropper.js></script>
<script type="app/assets/stylesheets" src=“timedropper.css></script>

<script type="text/javascript">
onload = function() {
  location.href="spotify://";
  init();
};

var PI_2        = Math.PI * 2;
var canvasW     = 400;
var canvasH     = 400;
var numMovers   = 200;
var friction    = .96;
var movers      = [];
var counter     = 0;
var repeat      = 40;
 
var canvas;
var ctx;
 
function init(){
    canvas = document.getElementById("effect_canvas");
    if ( canvas.getContext ){
    setup();
    setInterval( draw , 33 );
    }
}
 
function setup(){
    ctx       = canvas.getContext("2d");
    
    var i = numMovers;
    while ( i-- ){
    var m = new Mover();
    m.x   = canvasW * 0.5;
    m.y   = canvasH * 0.5;
    m.vX  = Math.cos(i) * Math.random() * 34;
    m.vY  = Math.sin(i) * Math.random() * 34;
    movers[i] = m;
    }
}
 
function draw(){
    counter++;
  if (counter >= repeat)
  {
    var i = numMovers;
    while ( i-- ){
    var m = new Mover();
    m.x   = canvasW * 0.5;
    m.y   = canvasH * 0.5;
    m.vX  = Math.cos(i) * Math.random() * 34;
    m.vY  = Math.sin(i) * Math.random() * 34;
    movers[i] = m;
    }
    counter = 0;
  }
    //ctx.globalCompositeOperation = "source-over";
    //ctx.fillStyle = "rgba(8,8,12,.65)";
    ctx.fillStyle = "rgba(256,256,256,256)";
    ctx.fillRect( 0 , 0 , canvasW , canvasH );
    //ctx.globalCompositeOperation = "lighter";
    
    var Mrnd = Math.random;
    var Mabs = Math.abs;
    
    var i = numMovers;
    while ( i-- ){
    var m  = movers[i];
    var x  = m.x;
    var y  = m.y;
    var vX = m.vX;
    var vY = m.vY;
    
    var dX = x;
    var dY = y; 
    var d  = Math.sqrt( dX * dX + dY * dY );
    if( d == 0 ) d = 0.001;
    dX /= d;
    dY /= d;
    
    vX *= friction;
    vY *= friction;
    
    var avgVX = Mabs( vX );
    var avgVY = Mabs( vY );
    var avgV  = ( avgVX + avgVY ) * 0.5;
    
    if( avgVX < .1 ) vX *= Mrnd() * 3;
    if( avgVY < .1 ) vY *= Mrnd() * 3;
    
    var sc = avgV * 0.45;
    sc = Math.max( Math.min( sc , 3.5 ) , 0.4 );
    
    var nextX = x + vX;
    var nextY = y + vY;
    
    m.vX = vX;
    m.vY = vY;
    m.x  = nextX;
    m.y  = nextY;
    
    ctx.fillStyle = m.color;
    ctx.beginPath();
    ctx.arc( nextX , nextY , sc , 0 , PI_2 , true );
    ctx.closePath();
    ctx.fill();     
    }
}
 
function Mover(){
    this.color = "rgb(" + Math.floor( Math.random()*255 ) + "," + Math.floor( Math.random()*255 ) + "," + Math.floor( Math.random()*255 ) + ")";
    this.y     = 0;
    this.x     = 0;
    this.vX    = 0;
    this.vY    = 0;
    this.size  = 1; 
}
 
function rect( context , x , y , w , h ){
    context.beginPath();
    context.rect( x , y , w , h );
    context.closePath();
    context.fill();
}
 
</script>

<div id="effect_div" class="effect_div">
  <canvas id="effect_canvas" width="400" height="400"></canvas>
  <div class="btn_container">
      <input type="submit" value="停止" class="btn btn-primary btn-lg'">
      <input type="submit" value="曲送り" class="btn btn-primary btn-lg'">
  </div>
</div>
